import random

# Number of cities in TSP
V = 5

# Names of the cities
GENES = "ABCDE"

# Structure of an individual
class Individual:
    def __init__(self, gnome=None):
        if gnome is None:
            self.gnome = random.sample(GENES, V)
        else:
            self.gnome = gnome
        self.fitness = self.calculate_fitness()

    def calculate_fitness(self):
        total_distance = sum(
            distance(self.gnome[i], self.gnome[i + 1])
            for i in range(V - 1)
            if distance(self.gnome[i], self.gnome[i + 1]) != float('inf')
        )
        if distance(self.gnome[-1], self.gnome[0]) != float('inf'):
            total_distance += distance(self.gnome[-1], self.gnome[0])  # Return to the starting city
        return total_distance

# Function to calculate distance between two cities
def distance(city1, city2):
    #float('inf') represents positive infinity; indicating there is no direct edge in between those two cities it is used to indicate
    #unbounded or undefined values and considering distances which are unreachable
    distances = {
        'A': [0, 2, float('inf'), 12, 5],
        'B': [2, 0, 4, 8, float('inf')],
        'C': [float('inf'), 4, 0, 3, 3],
        'D': [12, 8, 3, 0, 10],
        'E': [5, float('inf'), 3, 10, 0],
    }
    return distances[city1][GENES.index(city2)]

# Genetic algorithm function
def genetic_algorithm(population_size, num_generations):
    population = [Individual() for _ in range(population_size)]

    for generation in range(1, num_generations + 1):
        population.sort(key=lambda x: x.fitness)

        new_population = []

        for _ in range(population_size // 2):
            parent1, parent2 = random.sample(population[:population_size // 2], 2)
            child_gnome = crossover(parent1.gnome, parent2.gnome)
            new_population.extend([Individual(child_gnome)])

        population = new_population

        print(f"Generation {generation}: Best Fitness - {population[0].fitness}")

    best_tour = population[0]
    print("Best Tour:", best_tour.gnome)
    print("Best Fitness:", best_tour.fitness)

# Crossover function (Order Crossover)
def crossover(parent1, parent2):
    start, end = sorted(random.sample(range(V), 2))
    child_gnome = [-1] * V

    child_gnome[start:end + 1] = parent1[start:end + 1]

    remaining_indices = [i for i in range(V) if parent2[i] not in child_gnome]
    remaining_values = iter(parent2[i] for i in remaining_indices)

    for i in range(V):
        if child_gnome[i] == -1:
            child_gnome[i] = next(remaining_values)

    return child_gnome

if __name__ == "__main__":
    POP_SIZE = 10
    NUM_GENERATIONS = 5

    genetic_algorithm(POP_SIZE, NUM_GENERATIONS)
